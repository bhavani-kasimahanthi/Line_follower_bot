#define enA 10  // Enable1 L298 Pin enA 
#define in1 9   // Motor1 L298 Pin in1 
#define in2 8   // Motor1 L298 Pin in2 
#define in3 7   // Motor2 L298 Pin in3 
#define in4 6   // Motor2 L298 Pin in4 
#define enB 5   // Enable2 L298 Pin enB 
#define L_S A0  // IR sensor Left
#define R_S A1  // IR sensor Right
#define echo A2 // Ultrasonic sensor Echo pin
#define trigger A3 // Ultrasonic sensor Trigger pin
#define servo A5

int Set = 30; // Set threshold distance to 30cm (1 foot)
int distance_L, distance_F, distance_R;
int lowSpeedA = 100; // Reduced speed for Motor1 (0-255)
int lowSpeedB = 100; // Reduced speed for Motor2 (0-255)
int currentSpeedA = lowSpeedA;
int currentSpeedB = lowSpeedB;

void setup() {
    Serial.begin(9600);  // Start serial communication at 9600bps
    pinMode(R_S, INPUT);  // Right IR sensor as input
    pinMode(L_S, INPUT);  // Left IR sensor as input
    pinMode(echo, INPUT); // Ultrasonic Echo pin as input
    pinMode(trigger, OUTPUT); // Ultrasonic Trigger pin as output
    pinMode(enA, OUTPUT); // Enable pin A for Motor1
    pinMode(in1, OUTPUT); // Motor1 pin in1
    pinMode(in2, OUTPUT); // Motor1 pin in2
    pinMode(in3, OUTPUT); // Motor2 pin in3
    pinMode(in4, OUTPUT); // Motor2 pin in4
    pinMode(enB, OUTPUT); // Enable pin B for Motor2
    pinMode(servo, OUTPUT); // Servo pin as output

    analogWrite(enA, currentSpeedA); // Set Motor1 speed to low speed
    analogWrite(enB, currentSpeedB); // Set Motor2 speed to low speed

    // Initial servo sweep
    for (int angle = 70; angle <= 140; angle += 5) {
        servoPulse(servo, angle);
    }
    for (int angle = 140; angle >= 0; angle -= 5) {
        servoPulse(servo, angle);
    }
    for (int angle = 0; angle <= 70; angle += 5) {
        servoPulse(servo, angle);
    }

    distance_F = Ultrasonic_read(); // Read initial front distance
    delay(500);
}

void loop() {
    distance_F = Ultrasonic_read(); // Read front distance
    Serial.print("D F="); Serial.println(distance_F);

    // Both sensors detect white (off the line)
    if ((digitalRead(R_S) == 0) && (digitalRead(L_S) == 0)) {
        if (distance_F > Set) {
            forword();
        } else {
            Check_side();
        }
    }
    // Right sensor detects black (on the line), Left sensor detects white (off the line)
    else if ((digitalRead(R_S) == 1) && (digitalRead(L_S) == 0)) {
        turnRight();
    }
    // Right sensor detects white (off the line), Left sensor detects black (on the line)
    else if ((digitalRead(R_S) == 0) && (digitalRead(L_S) == 1)) {
        turnLeft();
    }
    
    delay(10);
}

void servoPulse(int pin, int angle) {
    int pwm = (angle * 11) + 500; // Convert angle to microseconds
    digitalWrite(pin, HIGH);
    delayMicroseconds(pwm);
    digitalWrite(pin, LOW);
    delay(50); // Refresh cycle of servo
}

long Ultrasonic_read() {
    digitalWrite(trigger, LOW);
    delayMicroseconds(2);
    digitalWrite(trigger, HIGH);
    delayMicroseconds(10);
    long time = pulseIn(echo, HIGH);
    return time / 29 / 2;
}

void compareDistance() {
    if (distance_L > distance_R) {
        turnLeft();
        delay(500);
        forword();
        delay(600);
        turnRight();
        delay(500);
        forword();
        delay(600);
        turnRight();
        delay(400);
    } else {
        turnRight();
        delay(500);
        forword();
        delay(600);
        turnLeft();
        delay(500);
        forword();
        delay(600);
        turnLeft();
        delay(400);
    }
}

void Check_side() {
    Stop();
    delay(100);
    for (int angle = 70; angle <= 140; angle += 5) {
        servoPulse(servo, angle);
    }
    delay(300);
    distance_R = Ultrasonic_read();
    Serial.print("D R="); Serial.println(distance_R);
    delay(100);
    for (int angle = 140; angle >= 0; angle -= 5) {
        servoPulse(servo, angle);
    }
    delay(500);
    distance_L = Ultrasonic_read();
    Serial.print("D L="); Serial.println(distance_L);
    delay(100);
    for (int angle = 0; angle <= 70; angle += 5) {
        servoPulse(servo, angle);
    }
    delay(300);
    compareDistance();
}

void forword() {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
}

void backword() {
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
}

void turnRight() {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
}

void turnLeft() {
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, HIGH);
}
